// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Node interface {
	IsNode()
	GetID() int64
}

type CreateUserInput struct {
	Name     string    `json:"name"`
	Gender   Gender    `json:"gender"`
	Birthday time.Time `json:"birthday"`
}

type CreateUserPayload struct {
	User *User `json:"user"`
}

type GetUserPayload struct {
	User *User `json:"user"`
}

type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *string `json:"startCursor"`
	EndCursor       *string `json:"endCursor"`
}

type UpdateUserInput struct {
	Name     string    `json:"name"`
	Gender   Gender    `json:"gender"`
	Birthday time.Time `json:"birthday"`
}

type UpdateUserPayload struct {
	User *User `json:"user"`
}

type User struct {
	ID       int64     `json:"id"`
	Name     string    `json:"name"`
	Gender   Gender    `json:"gender"`
	Birthday time.Time `json:"birthday"`
}

func (User) IsNode()           {}
func (this User) GetID() int64 { return this.ID }

type Gender string

const (
	GenderMale      Gender = "MALE"
	GenderFemale    Gender = "FEMALE"
	GenderNonbinary Gender = "NONBINARY"
	GenderOther     Gender = "OTHER"
	GenderNoanswer  Gender = "NOANSWER"
)

var AllGender = []Gender{
	GenderMale,
	GenderFemale,
	GenderNonbinary,
	GenderOther,
	GenderNoanswer,
}

func (e Gender) IsValid() bool {
	switch e {
	case GenderMale, GenderFemale, GenderNonbinary, GenderOther, GenderNoanswer:
		return true
	}
	return false
}

func (e Gender) String() string {
	return string(e)
}

func (e *Gender) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Gender(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Gender", str)
	}
	return nil
}

func (e Gender) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
